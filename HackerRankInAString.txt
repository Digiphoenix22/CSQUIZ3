import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'hackerrankInString' function below.
     *
     * The function is expected to return a STRING.
     * The function accepts STRING s as parameter.
     */

    public static String hackerrankInString(String s) {
    return containsHackerrank(s, "hackerrank") ? "YES" : "NO";
    }

    private static boolean containsHackerrank(String s, String target) {
        // Base cases
        if (target.length() == 0) return true; // All characters of target found
        if (s.length() == 0) return false;     // String s is empty but target is not

        // If the first character matches move to the next character in both strings
        if (s.charAt(0) == target.charAt(0)) {
            return containsHackerrank(s.substring(1), target.substring(1));
        }
        // If the first character doesn't match just move to the next character in s (This should work)
        return containsHackerrank(s.substring(1), target);
    }


}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, q).forEach(qItr -> {
            try {
                String s = bufferedReader.readLine();

                String result = Result.hackerrankInString(s);

                bufferedWriter.write(result);
                bufferedWriter.newLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }